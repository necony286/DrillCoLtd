// Scss mixins
@use "functions" as func;
@use "variables" as var;
@use "sass:math";

// MEDIA QUERY MANAGER

/*
0 - 575.98px:         Extra small devices (portrait phones, less than 576px)
575.98 - 767.98px:    Small devices (landscape phones, less than 768px)
767.98 - 991.98px:    Medium devices (tablets, less than 992px)
991.98 - 1199.98px:   Large devices (desktops, less than 1200px)
[1199.98 - 1800px]:   is where our normal styles apply
1800px + :            Extra large devices (large desktops)

$breakpoint argument choices:
- phone-port
- phone-land
- tab-port
- tab-land
- desktop-big

1em = 16px
*/
@mixin respond($breakpoint) {
  @if $breakpoint == phone-port {
    // Becomes active at 576px and up
    @media only screen and (width >= 36em) {
      @content;
    }
  }

  @if $breakpoint == phone-land {
    // Becomes active at 768px and up
    @media only screen and (width >= 48em) {
      @content;
    }
  }

  @if $breakpoint == tab-port {
    // Becomes active at 992px and up
    @media only screen and (width >= 62em) {
      @content;
    }
  }

  @if $breakpoint == tab-land {
    // Becomes active at 1200px and up
    @media only screen and (width >= 75em) {
      @content;
    }
  }

  @if $breakpoint == desktop-big {
    // Becomes active at 1800px and up
    @media only screen and (width >= 112.5em) {
      @content;
    }
  }
}

/*
  EXAMPLE
  
  .example {
    @include respond(phone-port) {
      background: white;
    }

    @include respond(desktop-big) {
      background: black;
    }
  }
*/

// RESPONSIVE TEXT - FLUID TEXT
$min-vw: 575.98px; // Screen min
$max-vw: 1800px; // Screen max

@function _strip-unit($value) {
  // use math.div to silence slash-divprecation
  @return math.div($value, ($value * 0 + 1));
}

@mixin fluid-font($min-font-size, $max-font-size) {
  font-size: $min-font-size;

  @media screen and (min-width: $min-vw) {
    font-size: calc(
      #{$min-font-size} + (#{_strip-unit($max-font-size - $min-font-size)} * ((
                  100vw - #{$min-vw}
                ) / #{_strip-unit($max-vw - $min-vw)}))
    );
  }

  @media screen and (min-width: $max-vw) {
    font-size: $max-font-size;
  }
}

/*
  EXAMPLE
  
  .example {
    @include fluid-font(20px, 48px);
  } 
*/

// TYPOGRAPHY MIXINS (used in typography.scss)
@mixin heading-typo {
  font-family: #{func.font(var.$font, heading, font-family)};
  font-weight: #{func.font(var.$font, heading, weight)};
  color: #{func.palette(var.$palette, typo, heading)};
}

@mixin text-typo {
  font-family: #{func.font(var.$font, text, font-family)};
  font-weight: #{func.font(var.$font, text, weight)};
  color: #{func.palette(var.$palette, typo, text)};
}

/*
  EXAMPLE
  
  .heading {
    @include heading-typo;
  }

  .text {
    @include text-typo;
  }
*/

@mixin type-scale($key) {
  $conf: func.val(var.$type-scale, $key);
  $min: func.val($conf, min);
  $max: func.val($conf, max);

  @include fluid-font($min, $max);
}
